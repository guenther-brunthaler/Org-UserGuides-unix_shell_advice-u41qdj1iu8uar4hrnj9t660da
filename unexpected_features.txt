Empty entries in $PATH
----------------------

At least in dash, such an entry has the same effect as if it were ".", i. e. the current directory will be included in the search for commands.

This is potentially dangerous, because a PATH like

$ PATH=/bin:/usr/bin:

looks harmless and one might think the empty entry at the end has no effect.


Aliases are dangerous
---------------------

POSIX shell aliases are substituted before variables or shell globs are expanded for the command's arguments.

Also, contrary to shell function invocations, aliases are expanded in-line and may convert a seemingly single simple command into a sequence of unrelated commands.

This can be a problem if data is piped into an alias without the user recognizing that fact: Only the first command in the alias will receive the redirection; any remaining expanded commands of the same alias will receive the normal standard input of the process.

Effects can get even weirder if an alias changes shell options temporarily which alter globbing or include "&". But even the inclusion of just ";" can create trouble unless the alias author considers all consequences.

Taken together, aliases can do some things normal shell functions can't, but none of them are normally useful.

If an attacker can inject an alias definition into a shell, he can alter the shell's normal operation in subtle ways and do things one thought would be impossible without modifying the shell binary.

Avoid aliases in scripts and use them only when absolutely necessary.

If in doubt whether an alias has been defined to override a critical command,

use

$ command thecommand

(but "command" may have also be redefined as an alias) or

$ \thecommand

The latter works, because alias substitution takes place before the "unnecessary" Backslash will be removed by the shell parser. (This trick has been learned from an article written by Simon Tatham.)


"sort" supports overwriting its input file "in-place"
-----------------------------------------------------

First of all, POSIX "sort" can take not just one but an arbitratry number of input files as arguments which will be sorted together just as if they had been concatenated with "cat".

Secondly, if the -o option is used to specifiy an output file, that file is allowed to be the same as one of the input files which have been specified as arguments.

Obviously, "sort" needs to read all its input files completely before the actual sort operation can start. But less obviously, it also closes its input files before opening the output file. (Which of course is only possible if "sort" does not write its result to standard output.)


"sed" can join lines simply with "s"
------------------------------------

The G and H commands of sed append text to the pattern space or hold buffer, but they will add a newline first, separating the previous contents and what has just been added.

Frequently this embedded newline is not wanted, but how to get rid of it? There is no "join lines" command, and everyone knows that "sed" cannot be compelled to process the newline it emits at the end of every output line.

It turns out, however, that embedded newlines within the pattern or hold space are different from the newline which will be added when the pattern space is printed.

It *can* be removed by command "s". The following example joins all lines separated by embedded newlines together, inserting "+" between the joined parts:

-----
$ echo some line | sed 'h; s/^/copy of /; H; g; s/\n/+/'
some line+copy of some line
-----

In this example, "h" first saves the original line, and "H" appends a modified copy to it, separated by an embedded newline. The "s" then replaces the embedded newline, thus "joining" the line.

Another example:

-----
$ { seq 10; echo E; } | sed '/^E$/ {g; s/\n/+/g; s/^+//; q}; H; d'
1+2+3+4+5+6+7+8+9+10
-----
